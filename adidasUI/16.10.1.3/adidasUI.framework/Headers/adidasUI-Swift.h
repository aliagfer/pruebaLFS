// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, AMCSocialNetwork) {
  AMCSocialNetworkFacebook = 0,
  AMCSocialNetworkTwitter = 1,
  AMCSocialNetworkGooglePlus = 2,
  AMCSocialNetworkInstagram = 3,
  AMCSocialNetworkYahoo = 4,
  AMCSocialNetworkWindowsLive = 5,
  AMCSocialNetworkVk = 6,
  AMCSocialNetworkNone = 7,
};

enum AUIAlertActionStyle : NSInteger;

/**
  A AUIAlertAction object represents an action that can be taken when tapping a button in an alert. You use this class to configure information about a single action, including the title to display in the button, any styling information, and a handler to execute when the user taps the button. After creating an alert action object, add it to a AUIAlertController object before displaying the corresponding alert to the user.
*/
SWIFT_CLASS("_TtC8adidasUI14AUIAlertAction")
@interface AUIAlertAction : NSObject <NSCopying>
/**
  The title of the action’s button. (read-only)
  This property is set to the value you specified in the <a href="">actionWithTitle:style:handler:</a> method.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/**
  The style that is applied to the action’s button. (read-only)
  This property is set to the value you specified in the <a href="">actionWithTitle:style:handler:</a> method.
*/
@property (nonatomic, readonly) enum AUIAlertActionStyle style;
/**
  A Boolean value indicating whether the action is currently enabled.
  The default value of this property is true. Changing the value to false causes the action to appear dimmed in the resulting alert. When an action is disabled, taps on the corresponding button have no effect.
*/
@property (nonatomic) BOOL enabled;
/**
  Create and return an action with the specified title and behavior.
  A new alert action object.
  \param aTitle 
  The text to use for the button title. The value you specify should be localized for the user’s current language.

  \param aStyle 
  Additional styling information to apply to the button. Use the style information to convey the type of action that is performed by the button. For a list of possible values, see the constants in AUIAlertActionStyle.

  \param aHandler 
  A block to execute when the user selects the action. This block has no return value and takes the selected action object as its only parameter.


  returns:
  A new alert action object.
*/
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)aTitle style:(enum AUIAlertActionStyle)aStyle handler:(void (^ _Nullable)(AUIAlertAction * _Nonnull))aHandler OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Styles to apply to action buttons in an alert.
  <ul>
    <li>
      Primary: Apply the PRIMARY style to the action’s button.
    </li>
    <li>
      Secondary: Apply the SOCONDARY style to the action’s button.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, AUIAlertActionStyle) {
  AUIAlertActionStylePrimary = 0,
  AUIAlertActionStyleSecondary = 1,
};

@class UIImage;
@class UIColor;
@class UIView;
@class NSCoder;
@class NSBundle;

/**
  A AUIAlertController object displays an alert message to the user. After configuring the alert controller with the actions and style you want, present it using the <a href="">presentViewController:animated:completion:</a> method.
  <h3>Overview</h3>
  In addition to displaying a message to a user, you can associate actions with your alert controller to give the user a way to respond. For each action you add using the <a href="">addAction:</a> method, the alert controller configures a button with the action details. When the user taps that action, the alert controller executes the block you provided when creating the action object. Listing 1 shows how to configure an alert with a single action.
  <em>Listing 1</em>Configuring and presenting an alert
  \code
  let alertController = AUIAlertController(title: "Title", message: "Message")

  let cancelAction = AUIAlertAction(title: "Cancel", style: .Primary) { (action) in
     println(action)
  }
  alertController.addAction(cancelAction)

  let destroyAction = AUIAlertAction(title: "Destroy", style: .Secondary) { (action) in
     println(action)
  }
  alertController.addAction(destroyAction)

  self.presentViewController(alertController, animated: true) {
  // ...
  }

  \endcode*/
SWIFT_CLASS("_TtC8adidasUI18AUIAlertController")
@interface AUIAlertController : UIViewController
/**
  The icon of the alert.
  The icon image is displayed prominently in the alert. You should use this icon to get the user’s attention.
*/
@property (nonatomic, strong) UIImage * _Nullable icon;
/**
  The title of the alert.
  The title string is displayed prominently in the alert. You should use this string to get the user’s attention and communicate the reason for displaying the alert.
*/
@property (nonatomic, copy) NSString * _Nullable title;
/**
  Descriptive text that provides more details about the reason for the alert.
  The message string is displayed below the title string and is less prominent. Use this string to provide additional context about the reason for the alert or about the actions that the user might take.
*/
@property (nonatomic, copy) NSString * _Nullable message;
/**
  The subMessage of the alert.
  The subMessage string is displayed below of the main message.
*/
@property (nonatomic, copy) NSString * _Nullable subMessage;
/**
  The primaryButtonColor of primary button.
  The primaryButtonColor color of primary button background.
*/
@property (nonatomic, strong) UIColor * _Nullable primaryButtonColor;
/**
  The primaryButtonTextColor of primary button.
  The primaryButtonTextColor color of primary button text.
*/
@property (nonatomic, strong) UIColor * _Nullable primaryButtonTextColor;
/**
  The secondaryButtonColor of secondary button.
  The secondaryButtonColor color of secondary button background.
*/
@property (nonatomic, strong) UIColor * _Nullable secondaryButtonColor;
/**
  The secondaryButtonTextColor of secondary button.
  The secondaryButtonTextColor color of secondary button text.
*/
@property (nonatomic, strong) UIColor * _Nullable secondaryButtonTextColor;
/**
  The textColor of the alert.
  The textColor color of all alert labels.
*/
@property (nonatomic, strong) UIColor * _Nullable textColor;
/**
  The backgroundView of the alert.
  The backgroundView default is nil. The ‘backgroundView’ will be added as a subview behind all other views.
*/
@property (nonatomic, strong) UIView * _Nullable backgroundView;
/**
  The iconTintColor of the alert.
  The iconTintColor color of alert icon. The iconTintColor default is nil.
*/
@property (nonatomic, strong) UIColor * _Nullable iconTintColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Creates and returns a view controller for displaying an alert to the user.
  An initialized alert controller object.
  \param aTitle The title of the alert. Use this string to get the user’s attention and communicate the reason for the alert.

  \param aMessage Descriptive text that provides additional details about the reason for the alert.


  returns:
  An initialized alert controller object.
*/
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)aTitle message:(NSString * _Nullable)aMessage;
/**
  Creates and returns a view controller for displaying an alert to the user.
  An initialized alert controller object.
  \param aTitle The title of the alert. Use this string to get the user’s attention and communicate the reason for the alert.

  \param aMessage Descriptive text that provides additional details about the reason for the alert.

  \param aIcon The icon image is displayed prominently in the alert. You should use this icon to get the user’s attention.

  \param aSubMessage Text string is displayed below of the main message.


  returns:
  An initialized alert controller object.
*/
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)aTitle message:(NSString * _Nullable)aMessage icon:(UIImage * _Nullable)aIcon subMessage:(NSString * _Nullable)aSubMessage OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
/**
  Attaches an action object to the alert.
  If your alert has multiple actions, the order in which you add those actions determines their order in the resulting alert.
  \param action The action object to display as part of the alert. Actions are displayed as buttons in the alert. The action object provides the button text and the action to be performed when that button is tapped.

*/
- (void)addAction:(AUIAlertAction * _Nonnull)action;
@property (nonatomic, readonly, copy) NSArray<AUIAlertAction *> * _Nonnull actions;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UILabel;

SWIFT_CLASS("_TtC8adidasUI9AUIButton")
@interface AUIButton : UIControl
/**
  A view that displays the value of the currentTitle property for a button. (read-only)
*/
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
/**
  A view that displays the value of the progress message. (read-only)
*/
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified progressMessageLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/**
  Sets the title to use for the specified state.
  Use this method to set the title for the button. The title you specify derives its formatting from the button’s associated label object.
  At a minimum, you should set the value for the normal state. If a title is not specified for a state, the default behavior is to use the title associated with the UIControlStateNormal state.
  \param title The title to use for the specified state.

  \param state The state that uses the specified title. The possible values are described in UIControlState.

*/
- (void)setTitle:(NSString * _Nullable)title forState:(UIControlState)state;
/**
  Returns the title associated with the specified state.
  The title for the specified state. If no title has been set for the specific state, this method returns the title associated with the UIControlStateNormal state.
  \param state The state that uses the title. The possible values are described in UIControlState.


  returns:
  The title for the specified state.
*/
- (NSString * _Nullable)titleForState:(UIControlState)state;
/**
  Sets the color of the title to use for the specified state.
  In general, if a property is not specified for a state, the default is to use the UIControlStateNormal value. Therefore, at a minimum, you should set the value for the normal state.
  \param color The color of the title to use for the specified state.

  \param state The state that uses the specified color. The possible values are described in UIControlState.

*/
- (void)setTitleColor:(UIColor * _Nonnull)color forState:(UIControlState)state;
/**
  Returns the title color used for a state.
  The color of the title for the specified state.
  \param state The state that uses the title color. The possible values are described in UIControlState.


  returns:
  The color of the title for the specified state.
*/
- (UIColor * _Nonnull)titleColorForState:(UIControlState)state;
/**
  Sets the progress message title to use for the specified state.
  Use this method to set the progress message title for the button.
  \param title The progress message title to use for the specified state.

  \param state The state that uses the specified title. The possible values are described in UIControlState.

*/
- (void)setProgressMessageTitleForState:(NSString * _Nullable)title forState:(UIControlState)state;
/**
  Returns the title associated with the specified state.
  The progress message title for the specified state. If no title has been set for the specific state, this method returns the title associated with the UIControlStateNormal state.
  \param state The state that uses the progress message title. The possible values are described in UIControlState.


  returns:
  The progress message title for the specified state.
*/
- (NSString * _Nullable)progressMessageTitleForState:(UIControlState)state;
/**
  The current title that is displayed on the button. (read-only)
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull currentTitle;
/**
  The color used to display the title. (read-only)
*/
@property (nonatomic, readonly, strong) UIColor * _Nonnull currentTitleColor;
/**
  Sets the button to in progress state.
  The progress message title for the specified state. If no title has been set for the specific state, this method returns the title associated with the UIControlStateNormal state.
  \param inProgress true to start progress message animation, false to stop it.

  \param animated true to animate the transition of a button to in progress state, false to make the transition immediate.

*/
- (void)setInProgress:(BOOL)inProgress animated:(BOOL)animated;
@property (nonatomic, setter=setHighlighted:) BOOL isHighlighted;
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
/**
  This property only for Interface Builder. Don’t use it programmatically.
*/
@property (nonatomic, copy) NSString * _Nullable title;
/**
  This property only for Interface Builder. Don’t use it programmatically.
*/
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/**
  This property only for Interface Builder. Don’t use it programmatically
*/
@property (nonatomic) NSInteger buttonTypeIB;
/**
  Sets/gets the background color of a button.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  Sets/gets the border color of a button.
*/
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/**
  Sets/gets the title for progress message label.
*/
@property (nonatomic, copy) NSString * _Nullable progressMessageTitle;
- (void)prepareForInterfaceBuilder;
@end


@interface AUIButton (SWIFT_EXTENSION(adidasUI))
@end


@interface AUIButton (SWIFT_EXTENSION(adidasUI))
@end

@class CAMediaTimingFunction;

SWIFT_CLASS("_TtC8adidasUI30AUICoverAnimationContainerView")
@interface AUICoverAnimationContainerView : UIView
@property (nonatomic, strong) IBOutlet UIView * _Nullable contentView;
@property (nonatomic) NSTimeInterval animationDuration;
@property (nonatomic, strong) CAMediaTimingFunction * _Nonnull animationTimingFunction;
@property (nonatomic, setter=setUserInteractionEnabled:) BOOL isUserInteractionEnabled;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithContentView:(UIView * _Nullable)aContentView;
- (nonnull instancetype)initWithContentView:(UIView * _Nullable)aContentView contentEdgeInsets:(UIEdgeInsets)aContentEdgeInsets OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

typedef SWIFT_ENUM(NSInteger, AUIDOBDateFormat) {
  AUIDOBDateFormatYmd = 0,
  AUIDOBDateFormatDmy = 1,
  AUIDOBDateFormatMdy = 2,
};

enum AUIInputViewValidationState : NSUInteger;
@protocol AUIInputValidator;
enum AUIVerificationMode : NSInteger;
enum AUIInputRightIconDisableMode : NSInteger;
@protocol AUIInputViewDelegate;

SWIFT_CLASS("_TtC8adidasUI12AUIInputView")
@interface AUIInputView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, readonly) BOOL isFirstResponder;
@property (nonatomic, readonly) BOOL canResignFirstResponder;
- (BOOL)resignFirstResponder;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (BOOL)becomeFirstResponder;
/**
  The receiver’s delegate.
  A delegate responds to validation state changes from the text input view.
*/
@property (nonatomic, weak) id <AUIInputViewDelegate> _Nullable delegate;
/**
  Sets/gets the title of a control.
*/
@property (nonatomic, copy) NSString * _Nullable title;
/**
  Sets/gets the placeholder of a control.
*/
@property (nonatomic, copy) NSString * _Nullable placeholder;
/**
  Sets/gets the text of a control.
*/
@property (nonatomic, copy) NSString * _Nullable guidance;
/**
  Sets/gets the optionality of a control. If true then control will show <em>OPTIONAL</em> label.
*/
@property (nonatomic) BOOL optional;
/**
  Sets/gets the error message color. The color also used by error line indicator.
*/
@property (nonatomic, strong) UIColor * _Nonnull errorMessageColor;
/**
  This property only for Interface Builder. Don’t use it programmatically
*/
@property (nonatomic) NSUInteger validationStateIB;
/**
  A AUIInputViewValidationState value that determines the validation state of the control.
  This property allows you to retrieve a validation state value.
*/
@property (nonatomic, readonly) enum AUIInputViewValidationState validationState;
- (void)addValidator:(id <AUIInputValidator> _Nonnull)validator;
- (void)removeValidator:(id <AUIInputValidator> _Nonnull)validator;
@property (nonatomic, readonly, copy) NSArray<id <AUIInputValidator>> * _Nonnull validators;
/**
  Sets when the verification mode. Default is Automatic
*/
@property (nonatomic) enum AUIVerificationMode verificationMode;
@property (nonatomic) BOOL _verified;
@property (nonatomic) BOOL verified;
/**
  Sets when the right icon is desabled. Default is Never
*/
@property (nonatomic) BOOL showsRightIcon;
@property (nonatomic) enum AUIInputRightIconDisableMode rightIconDisableMode;
@property (nonatomic, strong) UIImage * _Null_unspecified rightIcon;
@property (nonatomic, strong) UIImage * _Null_unspecified rightIconHighligted;
/**
  Sets/gets the progress indicator visibility.
*/
@property (nonatomic) BOOL showProgressIndicator;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

enum AUIDOBSeparatorType : NSInteger;
@protocol AUIDOBInputViewDelegate;

SWIFT_CLASS("_TtC8adidasUI15AUIDOBInputView")
@interface AUIDOBInputView : AUIInputView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Date with the current date displayed in the date picker and text field. Default date current.
*/
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic) NSInteger minimumAge;
/**
  This property only for Interface Builder. Don’t use it programmatically
*/
@property (nonatomic) NSInteger dateFormatIB;
@property (nonatomic) enum AUIDOBDateFormat dateFormat;
/**
  This property only for Interface Builder. Don’t use it programmatically
*/
@property (nonatomic) NSInteger separatorTypeIB;
@property (nonatomic) enum AUIDOBSeparatorType separatorType;
@property (nonatomic, weak) id <AUIInputViewDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AUIDOBInputViewDelegate> _Nullable textInputDelegate;
@end


@interface AUIDOBInputView (SWIFT_EXTENSION(adidasUI))
@end


@interface AUIDOBInputView (SWIFT_EXTENSION(adidasUI))
@end


@interface AUIDOBInputView (SWIFT_EXTENSION(adidasUI))
@end


SWIFT_PROTOCOL("_TtP8adidasUI20AUIInputViewDelegate_")
@protocol AUIInputViewDelegate
@optional
- (void)inputViewWillBeginEditing:(AUIInputView * _Nonnull)inputView;
- (void)inputViewDidBeginEditing:(AUIInputView * _Nonnull)inputView;
- (void)inputViewWillEndEditing:(AUIInputView * _Nonnull)inputView;
- (void)inputViewDidEndEditing:(AUIInputView * _Nonnull)inputView;
- (void)inputViewIntrinsicContentSizeIsChanging:(AUIInputView * _Nonnull)inputView;
- (void)inputViewRightIconTapped:(AUIInputView * _Nonnull)inputView;
@end


SWIFT_PROTOCOL("_TtP8adidasUI23AUIDOBInputViewDelegate_")
@protocol AUIDOBInputViewDelegate <AUIInputViewDelegate>
@optional
- (void)textInputViewDidChangeEditing:(AUIDOBInputView * _Nonnull)inputView;
@end

typedef SWIFT_ENUM(NSInteger, AUIDOBSeparatorType) {
  AUIDOBSeparatorTypeDot = 0,
  AUIDOBSeparatorTypeDotSmall = 1,
  AUIDOBSeparatorTypeDotLarge = 2,
  AUIDOBSeparatorTypeMinus = 3,
  AUIDOBSeparatorTypeSlash = 4,
};

@protocol AUITextInputViewDelegate;

SWIFT_CLASS("_TtC8adidasUI16AUITextInputView")
@interface AUITextInputView : AUIInputView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, weak) id <AUIInputViewDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AUITextInputViewDelegate> _Nullable textInputDelegate;
/**
  Sets/gets the text of a control.
*/
@property (nonatomic, copy) NSString * _Nullable text;
@end


SWIFT_CLASS("_TtC8adidasUI17AUIEmailInputView")
@interface AUIEmailInputView : AUITextInputView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull localizedDomainList;
@end


@interface AUIEmailInputView (SWIFT_EXTENSION(adidasUI))
@end

typedef SWIFT_ENUM(NSInteger, AUIInputRightIconDisableMode) {
  AUIInputRightIconDisableModeNever = 0,
  AUIInputRightIconDisableModeWhileValidationWrong = 1,
};


SWIFT_PROTOCOL("_TtP8adidasUI17AUIInputValidator_")
@protocol AUIInputValidator
- (BOOL)validate:(NSString * _Nonnull)text error:(NSError * _Nullable * _Nullable)error;
@end



@interface AUIInputView (SWIFT_EXTENSION(adidasUI))
@end

@class UIEvent;

@interface AUIInputView (SWIFT_EXTENSION(adidasUI))
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
@end


typedef SWIFT_ENUM(NSUInteger, AUIInputViewValidationState) {
  AUIInputViewValidationStateInitial = 0,
  AUIInputViewValidationStateWrong = 1,
  AUIInputViewValidationStateValid = 2,
};

@class NSTextCheckingResult;

/**
  AUILinkedTextLabel inherits from UILabel and allows to set a text or a rage clickable and perform an action.
*/
SWIFT_CLASS("_TtC8adidasUI18AUILinkedTextLabel")
@interface AUILinkedTextLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, setter=setEnabled:) BOOL isEnabled;
- (CGSize)sizeThatFits:(CGSize)size;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
/**
  This method is used to set the clickable text for the label, the delegate will be called when the label will be pressed.
  -parameter aClickableString:
  containing the text that will become clickable. Cannot be nil.
  -parameter aDelegate: AUILinkedTextLabelActionBlock to be called when linked label will be pressed.
*/
- (void)setClickableText:(NSString * _Nonnull)aClickableString withActionBlock:(void (^ _Nonnull)(NSTextCheckingResult * _Nonnull))anActionBlock;
@end


SWIFT_CLASS("_TtC8adidasUI13AUILoaderView")
@interface AUILoaderView : UIView
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified titleLabel;
@property (nonatomic, readonly, strong) UILabel * _Null_unspecified subTitleLabel;
@property (nonatomic) BOOL hidesWhenStopped;
@property (nonatomic, strong) UIColor * _Nonnull loaderColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
- (void)startAnimating;
- (void)stopAnimating;
- (BOOL)isAnimating;
@end


/**
  A AUIMessagePopoverController object displays an popover message to the user. After configuring the popover controller present it using the <a href="">presentViewController:animated:completion:</a> method.
  <h3>Overview</h3>
  Listing 1 shows how to configure an popover with a mesage
  <em>Listing 1</em>Configuring and presenting an popover
  \code
  let popup = AUIMessagePopoverController(message: "SIGN UP SUCCESSFUL")

  self.presentViewController(popup, animated: true, completion: nil)


  \endcode*/
SWIFT_CLASS("_TtC8adidasUI27AUIMessagePopoverController")
@interface AUIMessagePopoverController : UIViewController
/**
  The icon of the popover.
  The icon image is displayed prominently in the popover. You should use this icon to get the user’s attention.
*/
@property (nonatomic, readonly, strong) UIImage * _Nullable icon;
/**
  Descriptive text that provides more details about the reason for the popover.
  The message string is displayed below the icon. Use this string to provide additional context about the reason for the popover.
*/
@property (nonatomic, copy) NSString * _Nullable message;
/**
  The textColor of the popover.
  The textColor color of message popover label.
*/
@property (nonatomic, strong) UIColor * _Nullable textColor;
/**
  The backgroundColor of the popover.
  The backgroundColor color of popover.
*/
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/**
  The backgroundView of the popover.
  The backgroundView default is nil. The ‘backgroundView’ will be added as a subview behind all other views.
*/
@property (nonatomic, strong) UIView * _Nullable backgroundView;
/**
  The iconTintColor of the popover.
  The iconTintColor color of popover icon. The iconTintColor default is nil.
*/
@property (nonatomic, strong) UIColor * _Nullable iconTintColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  Creates and returns a view controller for displaying an popover to the user.
  An initialized popover controller object.
  \param aMessage Descriptive text that provides additional details about the reason for the popover.


  returns:
  An initialized popover controller object.
*/
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)aMessage;
/**
  Creates and returns a view controller for displaying an popover to the user.
  An initialized alert controller object.
  \param aMessage Descriptive text that provides additional details about the reason for the popover.

  \param aIcon The icon image is displayed prominently in the popover. You should use this icon to get the user’s attention.


  returns:
  An initialized alert controller object.
*/
- (nonnull instancetype)initWithMessage:(NSString * _Nullable)aMessage icon:(UIImage * _Nullable)aIcon OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol UIViewControllerContextTransitioning;

@interface AUIMessagePopoverController (SWIFT_EXTENSION(adidasUI)) <UIViewControllerAnimatedTransitioning>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end


@interface AUIMessagePopoverController (SWIFT_EXTENSION(adidasUI)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
@end

typedef SWIFT_ENUM(NSInteger, AUINameFormat) {
  AUINameFormatFl = 0,
  AUINameFormatLf = 1,
};

@protocol AUINameInputViewDelegate;

SWIFT_CLASS("_TtC8adidasUI16AUINameInputView")
@interface AUINameInputView : AUIInputView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  First name.
*/
@property (nonatomic, copy) NSString * _Nullable firstName;
/**
  Last name.
*/
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic) NSInteger minimumNameLatters;
/**
  This property only for Interface Builder. Don’t use it programmatically
*/
@property (nonatomic) NSInteger nameFormatIB;
@property (nonatomic) enum AUINameFormat nameFormat;
@property (nonatomic, weak) id <AUIInputViewDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AUINameInputViewDelegate> _Nullable textInputDelegate;
@end


@interface AUINameInputView (SWIFT_EXTENSION(adidasUI))
@end


@interface AUINameInputView (SWIFT_EXTENSION(adidasUI))
@end


@interface AUINameInputView (SWIFT_EXTENSION(adidasUI))
@end


SWIFT_PROTOCOL("_TtP8adidasUI24AUINameInputViewDelegate_")
@protocol AUINameInputViewDelegate <AUIInputViewDelegate>
@optional
- (void)textInputViewDidChangeEditing:(AUINameInputView * _Nonnull)inputView;
@end


SWIFT_CLASS("_TtC8adidasUI20AUIPasswordInputView")
@interface AUIPasswordInputView : AUITextInputView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSUInteger minimumCharacters;
@property (nonatomic) NSUInteger minimumLetters;
@property (nonatomic) NSUInteger minimumNumbers;
@property (nonatomic) NSUInteger minimumSpecialCharacters;
@property (nonatomic, copy) NSString * _Nullable localizedMinimumCharactersFormat;
@property (nonatomic, copy) NSString * _Nullable localizedMinimumLettersFormat;
@property (nonatomic, copy) NSString * _Nullable localizedMinimumNumbersFormat;
@property (nonatomic, copy) NSString * _Nullable localizedMinimumSpecialCharactersFormat;
@property (nonatomic) BOOL secureTextEntry;
@end


@interface AUIPasswordInputView (SWIFT_EXTENSION(adidasUI))
@end

@protocol AUISocialViewDelegate;

SWIFT_CLASS("_TtC8adidasUI13AUISocialView")
@interface AUISocialView : UIView
@property (nonatomic, strong) UIColor * _Nonnull buttonsTintColor;
- (void)setSocialNetworkConnected:(enum AMCSocialNetwork)socialNetwork connected:(BOOL)connected;
@property (nonatomic, weak) id <AUISocialViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP8adidasUI21AUISocialViewDelegate_")
@protocol AUISocialViewDelegate
- (void)socialViewDidEndSelecting:(AUISocialView * _Nonnull)socialView socialNetwork:(NSInteger)socialNetwork;
@end


/**
  Step item that is used by AUIStepProgressControl. Contains value and prompt information for a single step.
*/
SWIFT_CLASS("_TtC8adidasUI11AUIStepItem")
@interface AUIStepItem : NSObject
/**
  Current value displayed in the step circle.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/**
  Prompt text displayed in the description label when current step is active.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable prompt;
/**
  class method to get new step item
  <ul>
    <li>
      parameler value: value to be set
    </li>
    <li>
      parameler prompt: prompt to be set
      -returns the new instance of AUIStepItem instancetype
    </li>
  </ul>
*/
- (nonnull instancetype)initWithValue:(NSString * _Nonnull)value prompt:(NSString * _Nullable)prompt OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Progress control that can indicate steps with optional prompt for each of them.
*/
SWIFT_CLASS("_TtC8adidasUI22AUIStepProgressControl")
@interface AUIStepProgressControl : UIControl
/**
  Array of AUIStepItems used by the progress control.
*/
@property (nonatomic, copy) NSArray<AUIStepItem *> * _Nullable items;
/**
  Defines alignment for step items. Default value is UIControlContentHorizontalAlignmentCenter
*/
@property (nonatomic) UIControlContentHorizontalAlignment itemsAlignment;
/**
  Used to indicate or set current step of the progress control. Default is 0
*/
@property (nonatomic) NSInteger currentStep;
- (void)setCurrentStep:(NSInteger)step animated:(BOOL)animated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


@interface AUIStepProgressControl (SWIFT_EXTENSION(adidasUI))
@end



@interface AUITextInputView (SWIFT_EXTENSION(adidasUI))
@end


@interface AUITextInputView (SWIFT_EXTENSION(adidasUI))
@end

@class UITextField;

@interface AUITextInputView (SWIFT_EXTENSION(adidasUI)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end


SWIFT_PROTOCOL("_TtP8adidasUI24AUITextInputViewDelegate_")
@protocol AUITextInputViewDelegate <AUIInputViewDelegate>
@optional
- (void)textInputViewDidChangeEditing:(AUITextInputView * _Nonnull)inputView;
@end


SWIFT_CLASS("_TtC8adidasUI19AUIToastMessageView")
@interface AUIToastMessageView : UIView
@property (nonatomic, strong) UIImage * _Nullable leftIconImage;
@property (nonatomic, copy) NSString * _Nullable rightActionButtonTitle;
@property (nonatomic, copy) NSString * _Nullable messageText;
@property (nonatomic, copy) void (^ _Nullable actionHandler)(void);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)showAsCurrentInputAccessoryView;
- (void)removeFromCurrentInputAccessoryView;
@end

@protocol AUIToggleViewDelegate;

/**
  You use the AUIToggleView class to create and manage the On/Off buttons used, for example, YES/NO questions. These objects are known as toggle.
  Overview
  The AUIToggleView class declares a property and a method to control its on/off state. The control has three validation states, see AUIToggleViewValidationState. By tapping on left option button  the control changes its validation state to .Wrong and informs its delegate about state shanges. By tapping on right option button the control changes its validation state to .Valid.
  You can customize the appearance of the toggle view by setting a title, left option title, right option title and changing the color used to highlight error message and error line indicator.
*/
SWIFT_CLASS("_TtC8adidasUI13AUIToggleView")
@interface AUIToggleView : AUIInputView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/**
  If true then toggle view doesn’t show keyboard when it is in focus.
*/
@property (nonatomic) BOOL ignoresBecomeFirstResponder;
/**
  If true then toggle view highlights selected right option with bold.
*/
@property (nonatomic) BOOL highlightRightOptionOnSelect;
/**
  The receiver’s delegate.
  A delegate responds to validation state changes from the text input view.
*/
@property (nonatomic, weak) id <AUIToggleViewDelegate> _Nullable toggleDelegate;
- (void)prepareForInterfaceBuilder;
/**
  Sets/gets the title of a left (wrong) option.
*/
@property (nonatomic, copy) NSString * _Nullable leftOptionTitle;
/**
  Sets/gets the title of a right (valid) option.
*/
@property (nonatomic, copy) NSString * _Nullable rightOptionTitle;
- (void)selectLeftOption;
- (void)selectRightOption;
- (void)reset;
@end


@interface AUIToggleView (SWIFT_EXTENSION(adidasUI))
@end


@interface AUIToggleView (SWIFT_EXTENSION(adidasUI))
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/**
  The AUIToggleViewDelegate protocol defines a method you can use to receive validation state changes messages for AUIToggleView objects.
*/
SWIFT_PROTOCOL("_TtP8adidasUI21AUIToggleViewDelegate_")
@protocol AUIToggleViewDelegate
@optional
- (void)toggleViewValidationStateDidChange:(AUIToggleView * _Nonnull)toggleView;
@end

typedef SWIFT_ENUM(NSInteger, AUIVerificationMode) {
  AUIVerificationModeAutomatic = 0,
  AUIVerificationModeManually = 1,
};


@interface UIFont (SWIFT_EXTENSION(adidasUI))
+ (UIFont * _Nonnull)adihausDINRegularFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)adihausDINMediumFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)adihausDINBoldFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)adineuePRORegularFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)adineuePROBlackFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)adineuePROLightFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)adineuePROBoldFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)diamondsLightFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)diamondsBoldFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)diamondsThinFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)diamondsRegularFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)diamondsBlackFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)diamondsOrnamentsFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)neighbourhoodProRegularFontOfSize:(CGFloat)aSize;
+ (UIFont * _Nonnull)neighbourhoodProBoldFontOfSize:(CGFloat)aSize;
@end


@interface UIResponder (SWIFT_EXTENSION(adidasUI))
@end

#pragma clang diagnostic pop
